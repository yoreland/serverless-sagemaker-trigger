AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Amazon API Gateway to AWS Lambda to Amazon DynamoDB
Resources:
  initModel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: initModel
      Runtime: python3.8
      CodeUri: src/initModel
      MemorySize: 1200
      Timeout: 30
      Events:
        ServerlessRestApiPOSTinit:
          Type: Api
          Properties:
            Path: /init
            Method: POST
      Environment:
        Variables:
          FLIGHTINFO_TABLE_NAME: !Ref flightInfo
          FLIGHTINFO_TABLE_ARN: !GetAtt flightInfo.Arn
          DATASOURCE_BUCKET_NAME: !Ref dataSource
          DATASOURCE_BUCKET_ARN: !GetAtt dataSource.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref flightInfo
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${dataSource}
                - !Sub arn:${AWS::Partition}:s3:::${dataSource}/*
      Architectures:
        - arm64
      Layers:
        - !Ref sagemakerHandler
  updateTable:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: updateTable
      CodeUri: src/updateTable
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 1200
      Timeout: 30
      Tracing: Active
      Events:
        ServerlessRestApiPOSTupdate:
          Type: Api
          Properties:
            Path: /update
            Method: POST
      Environment:
        Variables:
          FLIGHTINFO_TABLE_NAME: !Ref flightInfo
          FLIGHTINFO_TABLE_ARN: !GetAtt flightInfo.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref flightInfo
      Architectures:
        - arm64
      Layers:
        - !Ref sagemakerHandler
  updateTableLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${updateTable}
  query:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: query
      CodeUri: src/query
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 1200
      Timeout: 30
      Tracing: Active
      Events:
        ServerlessRestApiPOSTquery:
          Type: Api
          Properties:
            Path: /query
            Method: POST
      Environment:
        Variables:
          FLIGHTINFO_TABLE_NAME: !Ref flightInfo
          FLIGHTINFO_TABLE_ARN: !GetAtt flightInfo.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref flightInfo
      Architectures:
        - arm64
      Layers:
        - !Ref sagemakerHandler
  queryLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${query}
  flightInfo:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: flight_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: flight_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
  dataSource:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-datasourc-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  dataSourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref dataSource
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt dataSource.Arn
              - !Sub ${dataSource.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  sagemakerHandler:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: sagemakerHandler
      ContentUri: src/sagemakerHandle
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.8
Outputs:
  EndpointUrl:
    Description: HTTP REST endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod